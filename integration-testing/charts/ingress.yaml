apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: client-ingress
  namespace: ${NAMESPACE}
  annotations:
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"
  labels:
    app.kubernetes.io/managed-by: manual
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - ${HOST_BASE_URL}
      secretName: ${CERTIFICATE_NAME}
  rules:
    - host: ${HOST_BASE_URL}
      http:
        paths:
          - path: ${CLIENT_BASE_URL}
            pathType: Prefix
            backend:
              service:
                name: ${CLIENT_DEPLOYMENT}-service
                port:
                  number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: le-service-ingress
  namespace: ${NAMESPACE}
  annotations:
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/use-regex: "true"
  labels:
    app.kubernetes.io/managed-by: manual
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - ${HOST_BASE_URL}
      secretName: ${CERTIFICATE_NAME}
  rules:
    - host: ${HOST_BASE_URL}
      http:
        paths:
          - path: ${LE_SERVICE_BASE_URL}
            pathType: Prefix
            backend:
              service:
                name: ${LE_SERVICE_DEPLOYMENT}-service
                port:
                  number: ${LE_SERVICE_PORT}
